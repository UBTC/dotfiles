if [ $terminfo[colors] -ge 8 ]; then
    colors 
fi

#Adapted from oh-my-zsh
RPROMPT_PREFIX="[%{$fg[red]%}"
RPROMPT_SUFFIX="%{$reset_color%}]"
GIT_PROMPT_DIRTY="%{$fg[green]%}!"
GIT_PROMPT_UNTRACKED="%{$fg[green]%}?"
GIT_PROMPT_CLEAN=""

function prompt_char {
    git branch >/dev/null 2>/dev/null && echo '±' && return
    hg root >/dev/null 2>/dev/null && echo '☿' && return
    echo '○'
}

# get the name of the branch we are on
function git_prompt_info() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo "${ref#refs/heads/}$(parse_git_dirty)"
}
 
parse_git_dirty () {
  gitstat=$(git status 2>/dev/null | grep '\(# Untracked\|# Changes\|# Changed but not updated:\)')
 
  if [[ $(echo ${gitstat} | grep -c "^# Changes to be committed:$") > 0 ]]; then
echo -n "$GIT_PROMPT_DIRTY"
  fi
 
  if [[ $(echo ${gitstat} | grep -c "^\(# Untracked files:\|# Changed but not updated:\)$") > 0 ]]; then
echo -n "$GIT_PROMPT_UNTRACKED"
  fi
 
  if [[ $(echo ${gitstat} | grep -v '^$' | wc -l | tr -d ' ') == 0 ]]; then
echo -n "$GIT_PROMPT_CLEAN"
  fi
}
 
function current_branch() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo ${ref#refs/heads/}
}

function hg_prompt_info {
    local branch=$(hg branch 2>/dev/null) || return
    echo $branch
}

PROMPT='$(prompt_char) ${fg[green]%}<%U%n@%m%u>%{$reset_color%} %{$fg[yellow]%}%~%{$reset_color%} %%> '

RPROMPT='$RPROMPT_PREFIX$(hg_prompt_info)$(git_prompt_info)$RPROMPT_SUFFIX'
