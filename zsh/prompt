if [ $terminfo[colors] -ge 8 ]; then
    colors 
fi

VCS_PREFIX="[%{$fg[red]%}"
VCS_SUFFIX="%{$reset_color%}]"
GIT_PROMPT_DIRTY="%{$fg[green]%}!"
GIT_PROMPT_UNTRACKED="%{$fg[green]%}?"
GIT_PROMPT_CLEAN=""

#Adapted from oh-my-zsh
function vcs_char {
    git branch >/dev/null 2>/dev/null && echo '±' && return
    hg root >/dev/null 2>/dev/null && echo '☿' && return
    echo '○'
}

# get the name of the branch we are on
function git_prompt_info() {
  local ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo "${ref#refs/heads/}$(parse_git_dirty)"
}
 
function parse_git_dirty () {
  gitstat=$(git status 2>/dev/null | grep '\(# Untracked\|# Changes\|# Changed but not updated:\)')
 
  if [[ $(echo ${gitstat} | grep -c "^# Changes to be committed:$") > 0 ]]; then
echo -n "$GIT_PROMPT_DIRTY"
  fi
 
  if [[ $(echo ${gitstat} | grep -c "^\(# Untracked files:\|# Changed but not updated:\)$") > 0 ]]; then
echo -n "$GIT_PROMPT_UNTRACKED"
  fi
 
  if [[ $(echo ${gitstat} | grep -v '^$' | wc -l | tr -d ' ') == 0 ]]; then
echo -n "$GIT_PROMPT_CLEAN"
  fi
}
 
function hg_prompt_info {
    local branch=$(hg branch 2>/dev/null) || return
    echo $branch
}

function vcs_prompt {
    local prompt=$(git_prompt_info) || $(hg_prompt_info) || ''
    if [[ -z $prompt ]]; then
        echo ''
    else
        echo "$VCS_PREFIX$prompt$VCS_SUFFIX "
    fi
}
function login_prompt() {
    echo "${fg[green]%}<%U%n@%m%u>%{$reset_color%} "
}
function dir_prompt() {
    echo "%{$fg[yellow]%}%~%{$reset_color%}"
}

function set_prompt() {
    export PROMPT='$(vcs_char) $(login_prompt)$(vcs_prompt)$(dir_prompt) 
%%> '
}

set_prompt
