# -*- mode: sh -*-

emulate -L zsh
trans() {
    case "$1" in
        [dD]*)
            translate -l de-en $2
            ;;
        [eE]*)
            translate -l de-en -i $2
            ;;
        [hH]|-help|-h|--help)
            echo "Usage $0 [ dD | eE ]"
            echo "      d : German -> English"
            echo "      e : English -> German"
            ;;
        *)
            translate -l de-en $2
            translate -l de-en -i $2
            ;;
    esac
}

lsarchive() {
    if [[ -f "$1" ]] {
        case "$1" in
            *.tar*|*.tbz|*.tgz)
                tar -atf "$1" ;;
            *.zip)
                unzip -l "$1" ;;
            *.rar)
                unrar l "$1" ;;
            *.deb)
                dpkg-deb -c "$1" ;;
            *)
                echo "Usage:"
                echo "lsarchive ARCHIVE [tar(possibly compressed), zip, rar, deb]"
                ;;
        esac
    } else {
        echo "'$1' is not a valid archive"
    }
}

#Show space dir occupies
dirspace() {
    if [[ -n "$1" ]] {
        for dir in "$@" ; do
            if [[ -d "$dir" ]] {
                ( cd $dir; echo "-<$dir>"; du -shx .; echo);
            } else {
                echo "Warning: $dir does not exist." >&2
            }
        done
    } else {
        for dir in $path; do
            if [[ -d "$dir" ]] {
                ( cd $dir; echo "-<$dir>"; du -shx .; echo);
            } else {
                echo "Warning: $dir does not exist." >&2
            }
        done
    }
}

mcd() { mkdir -p "$@" && cd "$@" }
cl() { cd "$@" && l }
cls() { cd "$@" && ls }

dcp() {
    if [[ -d $2 ]] {
        mkdir -p $2 && cp $1 $2
    } else {
        mkdir -p dirname $2 && cp $1 $2
    }
}

wiki() {
    # see https://dgl.cx/2008/11/wpdns-pres/
    dig +short txt $1.wp.dg.cx
}

# Remove latex files
rml() {
    if [[ $# -gt 0 ]] {
        for d in "$@"; do
            rm -r "$d"/(auto|_region_.tex|*.(aux|log|out))
        done
    } else {
        d=$(pwd)
        rm -r "$d"/(auto|_region_.tex|*.(aux|log|out))
    }
}

encrypt() {
    gpg -es -r $GPGKEY $1
}

decrypt() {
    gpg -o ${1%.*} -d $1
}

nm-toggle() {
    (nmcli nm enable | grep 'enabled' > /dev/null) && nmcli nm enable false || nmcli nm enable true
}
